<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<domain name="PasswordRotationNotifications">
    <description>Password Policy Notifications</description>
    <scenarios>
        <scenario type="PasswordRotationNotification">
            <description>Send Reminder Emails to end users</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
@Plan:name('Default')
@Plan:description('Default Execution Plan for Password Expiry Email Notifications')

/* Stream and table Definitions ... */

@Import('org.wso2.is.analytics.stream.OverallUserData:1.0.0')
define stream overallUserDataStream (meta_tenantId int, action string, username string, userStoreDomain string, tenantDomain string, newRoleList string, deletedRoleList string, claims string, profile string, actionHolder string, actionTimestamp long);

@Export('org.wso2.carbon.identity.policy.password.Notifications:1.0.0')
define stream notificationsStream (username string, userStoreDomain string, tenantDomain string, email string);

@Export('org.wso2.carbon.identity.policy.password.CredentialUpdates:1.0.0')
define stream credentialUpdatesStream (username string, userStoreDomain string, tenantDomain string, updateTimestamp long);

@From(eventtable='analytics.table', table.name='ORG_WSO2_IS_ANALYTICS_STREAM_LATESTCLAIMS')
define table latestClaimsEventTable (username string, userStoreDomain string, tenantDomain string, claimURI string, claimValue string);

@From(eventtable='analytics.table', table.name='ORG_WSO2_IS_ANALYTICS_STREAM_LATESTIDPPROPERTIES')
define table latestIdPPropertiesEventTable (idPName string, tenantDomain string, propertyName string, propertyValue string);

@From(eventtable='analytics.table', table.name='ORG_WSO2_CARBON_IDENTITY_POLICY_PASSWORD_CREDENTIALUPDATES')
define table credentialUpdatesTable (username string, userStoreDomain string, tenantDomain string, updateTimestamp long);

define trigger dailyTrigger at every $taskIntervalInDays days;

/* Queries */

/* Updating the credential updates event table */

from overallUserDataStream[action == 'POST_ADD_USER' or action == 'POST_UPDATE_CREDENTIAL' or action == 'POST_UPDATE_CREDENTIAL_BY_ADMIN']
select action, overallUserDataStream.username as username, overallUserDataStream.userStoreDomain as userStoreDomain, overallUserDataStream.tenantDomain as tenantDomain, actionTimestamp as updateTimestamp
insert into credentialUpdatesTempStream;

from credentialUpdatesTempStream
select username, userStoreDomain, tenantDomain, updateTimestamp
insert into credentialUpdatesStream;

/* Selecting notifications to be sent now */

from dailyTrigger#window.length(1) join latestIdPPropertiesEventTable
select tenantDomain, propertyName, propertyValue, dailyTrigger.triggered_time
having idPName == 'LOCAL'
    and (propertyName == 'passwordExpiry.passwordExpiryInDays'
        or propertyName == 'passwordExpiry.priorReminderTimeInDays'
        or propertyName == 'passwordExpiry.enableEmailNotifications')
insert into requiredIdPPropertiesStream;

partition with (tenantDomain of requiredIdPPropertiesStream)
begin
	from every e1=requiredIdPPropertiesStream -> e2=requiredIdPPropertiesStream -> e3=requiredIdPPropertiesStream
	select e1.tenantDomain, e1.triggered_time,
		math:parseInt(ifThenElse(e1.propertyName == 'passwordExpiry.passwordExpiryInDays', e1.propertyValue, ifThenElse(e2.propertyName == 'passwordExpiry.passwordExpiryInDays', e2.propertyValue, e3.propertyValue))) as passwordExpiryInDays,
		math:parseInt(ifThenElse(e1.propertyName == 'passwordExpiry.priorReminderTimeInDays', e1.propertyValue, ifThenElse(e2.propertyName == 'passwordExpiry.priorReminderTimeInDays', e2.propertyValue, e3.propertyValue))) as priorReminderTimeInDays
	having ifThenElse(e1.propertyName == 'passwordExpiry.enableEmailNotifications', e1.propertyValue, ifThenElse(e2.propertyName == 'passwordExpiry.enableEmailNotifications', e2.propertyValue, e3.propertyValue)) == 'true'
	insert into tenantIdPPropertiesStream;
end;

from tenantIdPPropertiesStream#window.length(1) join credentialUpdatesTable
	on tenantIdPPropertiesStream.tenantDomain == credentialUpdatesTable.tenantDomain
select username, userStoreDomain, credentialUpdatesTable.tenantDomain, 'http://wso2.org/claims/emailaddress' as emailClaimURI
having updateTimestamp + (passwordExpiryInDays - priorReminderTimeInDays) * 24 * 60 * 60 * 1000 < triggered_time
insert into expiredPasswordStream;

from expiredPasswordStream#window.length(1) left outer join latestClaimsEventTable
	on expiredPasswordStream.username == latestClaimsEventTable.username
		and expiredPasswordStream.userStoreDomain == latestClaimsEventTable.userStoreDomain
		and expiredPasswordStream.tenantDomain == latestClaimsEventTable.tenantDomain
		and expiredPasswordStream.emailClaimURI == latestClaimsEventTable.claimURI
select expiredPasswordStream.username, expiredPasswordStream.userStoreDomain, expiredPasswordStream.tenantDomain, latestClaimsEventTable.claimValue as email
insert into pendingNotificationsStream;

/* Sending email notifications for expired credentials of users with emails */

from pendingNotificationsStream[not(email is null)]
select username, userStoreDomain, tenantDomain, email
insert into notificationsStream;

/* Logging expired credentials of users without emails */

from pendingNotificationsStream[email is null]
select username, userStoreDomain, tenantDomain, email
insert into notificationsWithNoEmailStream;

from notificationsWithNoEmailStream#log('warn', str:concat('Failed to remind the user: {username: ', username,
										   ', tenantDomain: ', tenantDomain,
										   ', userStoreDomain: ', userStoreDomain,
										   '} to reset the password.'))
select *
insert into dummyStream;

/* Removing the password changes entries from the table */

from pendingNotificationsStream
delete credentialUpdatesTable
	on credentialUpdatesTable.username == username
		and credentialUpdatesTable.userStoreDomain == userStoreDomain
		and credentialUpdatesTable.tenantDomain == tenantDomain;

from overallUserDataStream[action == 'POST_DELETE_USER']
delete credentialUpdatesTable
	on credentialUpdatesTable.username == username
		and credentialUpdatesTable.userStoreDomain == userStoreDomain
		and credentialUpdatesTable.tenantDomain == tenantDomain;
                	]]>
                </template>
            </templates>
            <parameters>
                <parameter name="taskIntervalInDays" type="int">
                    <displayName>Periodic Task interval in days</displayName>
                    <description>The interval between two password expiry notification check tasks</description>
                    <defaultValue>1</defaultValue>
                </parameter>
            </parameters>
        </scenario>
    </scenarios>
</domain>